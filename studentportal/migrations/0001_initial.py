# Generated by Django 3.0.8 on 2020-12-25 01:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import studentportal.decorators
import studentportal.models
import studentportal.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('batch_number', models.IntegerField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=300)),
                ('description', models.CharField(blank=True, default='', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='NGO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=1000)),
                ('link', models.URLField(blank=True)),
                ('details', models.TextField(blank=True)),
                ('category', models.ForeignKey(null=True, on_delete=models.SET(studentportal.models._get_other_category), related_name='NGOs', to='studentportal.Category')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1000)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('credits', models.IntegerField(default=2, validators=[studentportal.validators.validate_credits])),
                ('NGO_name', models.CharField(max_length=1000)),
                ('NGO_details', models.CharField(max_length=1000)),
                ('NGO_super', models.CharField(max_length=1000)),
                ('NGO_super_contact', models.CharField(max_length=100)),
                ('goals', models.TextField()),
                ('schedule_text', models.TextField()),
                ('finish_date', models.DateTimeField(blank=True, null=True)),
                ('stage', models.IntegerField(default=1)),
                ('deleted', models.BooleanField(default=False)),
                ('presented', models.BooleanField(default=False)),
                ('NGO', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='studentportal.NGO')),
                ('category', models.ForeignKey(on_delete=models.SET(studentportal.models._get_other_category), related_name='projects', to='studentportal.Category')),
            ],
            managers=[
                ('all_projects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='feedback', serialize=False, to='studentportal.Project')),
                ('hours', models.IntegerField(validators=[studentportal.validators.validate_feedback_hours])),
                ('achievements', models.TextField(max_length=2000)),
                ('experience', models.IntegerField(choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Neutral'), (4, 'Good'), (5, 'Very Good')], default=1)),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='semester',
            field=models.ManyToManyField(to='studentportal.Semester'),
        ),
        migrations.AddField(
            model_name='project',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Edit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diff_text', models.TextField(blank=True, max_length=2000)),
                ('when', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edits', to='studentportal.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to=studentportal.decorators._PathAndRename('uploads/%Y/'))),
                ('name', models.CharField(default='', max_length=100)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('category', models.IntegerField()),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='studentportal.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Bug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggestions', models.TextField(blank=True, max_length=2000)),
                ('rating', models.IntegerField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bugs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
